@model TrashCollector.Models.Customer

@{
    ViewData["Title"] = "CustMap";
    Layout = "~/Views/Shared/_LayoutEmployee.cshtml";
}
<!DOCTYPE html>
<html>
<head>
    <style>
        /* Set the size of the div element that contains the map */
        #map {
            height: 400px; /* The height is 400 pixels */
            width: 100%; /* The width is the width of the web page */
        }
    </style>
</head>
<body>
    <h3>Address: @Html.DisplayFor(model => model.Address) @Html.DisplayFor(model => model.City),@Html.DisplayFor(model => model.State) @Html.DisplayFor(model => model.Zipcode)</h3>
    <!--The div element for the map -->
    <div id="map"></div>
    <script>
        // Initialize and add the map
        function initMap() {
            // The location of Uluru
            var theplace = { lat: 43.4126281, lng: -88.1922742 };
            // The map, centered at Uluru
            var map = new google.maps.Map(
                document.getElementById('map'), { zoom: 12, center: theplace });
            // The marker, positioned at Uluru
            var marker = new google.maps.Marker({ position: theplace, map: map });
        }
    </script>
    <!--Load the API from the specified URL
    * The async attribute allows the browser to render the page while the API loads
    * The key parameter will contain your own API key (which is not needed for this tutorial)
    * The callback parameter executes the initMap() function
    -->
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=YOURAPIKEY&callback=initMap">
    </script>
    <div>
        <a asp-action="CustProfile" asp-route-id="@Model.CustomerId">Customer Profile</a> |
        <a asp-action="Index">Back to Today's Route</a>
    </div>
</body>
</html>


